refinement sortedArray long[] array {
    long i = 0
    while i < array.length {
        if array[i] > array[i+1]:
            return false
        i = i + 1
    }
    return true
}

fn main {
    long[] arr = new long[1024]

    print(arr.length)

    long i = 0
    while i < arr.length {
        arr[i] = i
        i = i + 1
    }

	print(runSlow(arr))
	print(runSlow(arr))
	print(runSlow(arr))
	print(runSlow(arr))
	print(runSlow(arr))
	print(runSlow(arr))
    print(runSlow(arr))
    print(runSlow(arr))
    print(runSlow(arr))
    print(runSlow(arr))
	print 0
	print(runFast(arr))
	print(runFast(arr))
	print(runFast(arr))
	print(runFast(arr))
	print(runFast(arr))
	print(runFast(arr))
	print(runFast(arr))
	print(runFast(arr))
	print(runFast(arr))
	print(runFast(arr))


	return 0
}

fn runFast long[] arr -> long {
	sortedArray a = arr
	long b = 1000
	long c
	return (benchmark 10000:
        c = indexOf(a, b)
    )
}

fn runSlow long[] arr -> long {
	long[] a = arr
	long b = 1000
	long c
	return (benchmark 10000:
	        c = indexOf(a, b)
	    )
}

fn indexOf (long[] arr, long value) -> long {
    long i = 0
    while i < arr.length {
        if arr[i] == value {
            return i
        }
        i = i + 1
    }
    return 0-1

}
fn indexOf (sortedArray arr, long value) -> long {
    long left = 0
    long right = arr.length - 1

    while left <= right {
        long mid = (left + right) >> 1
        if arr[mid] == value {
            return mid
        } else if arr[mid] < value {
            left = mid + 1
        } else {
            right = mid - 1
        }
    }
    return 0-1
}
