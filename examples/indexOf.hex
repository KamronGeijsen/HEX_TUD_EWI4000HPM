refinement sortedArray long[128] a {
    long i = 0
    while i < 9 {
        if a[i] > a[i+1]:
            return false
        i = i + 1
    }
    return true
}

fn main {
	print(runFast())
	print(runFast())
	print(runFast())
	print(runFast())
	print(runFast())
	print(runFast())
	print(runFast())
	print(runFast())
	print(runFast())
	print(runFast())
	
	print 0
	
	print(runSlow())
	print(runSlow())
	print(runSlow())
	print(runSlow())
	print(runSlow())
	print(runSlow())
	print(runSlow())
	print(runSlow())
	print(runSlow())
	print(runSlow())
	
	return 0
}

fn runFast -> long {
	sortedArray a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128]
	long b = 3
	long c
	return (benchmark 1000000:
            c = indexOf(a, b)
        )
}
	
fn runSlow -> long {
	long[128] a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128]
	long b = 3
	long c
	return (benchmark 1000000:
	        c = indexOf(a, b)
	    )
}

fn indexOf (long[128] arr, long value) -> long {
    long i = 0
    while i < 128 {
        if arr[i] == value {
            return i
        }
        i = i + 1
    }
    return 0-1

}
fn indexOf (sortedArray arr, long value) -> long {
    long left = 0
    long right = 127
    while left <= right {
        long mid = (left + right) / 2
        if arr[mid] == value {
            return mid
        } else if arr[mid] < value {
            left = mid + 1
        } else {
            right = mid - 1
        }
    }
    return 0-1
}
