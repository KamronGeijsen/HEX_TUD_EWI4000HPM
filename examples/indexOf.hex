refinement sortedArray long[] array {
    long i = 0
    while i < array.length {
        if array[i] > array[i+1]:
            return false
        i = i + 1
    }
    return true
}

fn main {
    long[] arr = new long[128]

    long i = 0
    while i < arr.length {
        arr[i] = i
        i = i + 1
    }
	runSlow(arr)
	runSlow(arr)
	runSlow(arr)
	runSlow(arr)
	runSlow(arr)
	runSlow(arr)
	runSlow(arr)
	runSlow(arr)
	runSlow(arr)
	runSlow(arr)
	
	print 0

	runFast(arr)
	runFast(arr)
	runFast(arr)
	runFast(arr)
	runFast(arr)
	runFast(arr)
	runFast(arr)
	runFast(arr)
	runFast(arr)
	runFast(arr)
	
	return 0
}

fn runSlow long[] arr {
	long[] a = arr
	long b = 100
	long c

	long time = benchmark 100000 {
        c = indexOf(a, b)
    }

	print(time, c)
}

fn runFast long[] arr {
	sortedArray a = arr
	long b = 100
	long c

	long time = benchmark 100000 {
        c = indexOf(a, b)
    }

	print(time, c)
}

fn indexOf (long[] arr, long value) -> long {
    long i = 0
    while i < arr.length {
        if arr[i] == value {
            return i
        }
        i = i + 1
    }
    return 0-1

}
fn indexOf (sortedArray arr, long value) -> long {
    long left = 0
    long right = arr.length - 1

    while left <= right {
        long mid = (left + right) >> 1
        if arr[mid] == value {
            return mid
        } else if arr[mid] < value {
            left = mid + 1
        } else {
            right = mid - 1
        }
    }
    return 0-1
}
