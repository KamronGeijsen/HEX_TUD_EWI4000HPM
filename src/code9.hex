
((int, int) a, (int, int) b, (int, int) c) pairs = (1, 2, 3, 4, 5, 6)
for pairs each b, c{
	print b, c
	b * c
}
print ans
 
//#print [b*c for b, c in pairs]
//#print (for pairs each b, c: b*c)

(int, int, int) l2 = for pairs each b: print(b)
print l2

^^
(int a, int b) c = (1, 2)
print(c)
print(c.a)

fn add (int a, int b) args -> (int c) rets {
	print(ans)
	print(args)
	rets.c = args.a + args.b
}
print(add(1, 2))



^^
(int a, int b) = (1, 2)
print a
print(a, b)

fn foo int, int -> int:
	return ans[0] + ans[1]

print(foo(1, 2))
(int, int) c = (a, b)
print(foo(c[0], c[1]))

print(foo c)
